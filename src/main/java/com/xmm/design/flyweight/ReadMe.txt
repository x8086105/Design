享元设计模式
享元模式通过减少重复对象创建的数量，来减少内存占用和提高性能。通过享元模式设计，提取出对象中的共享部分，将可变的部分放在客户端控制。
这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。

享元模式的核心是：共享与分离，共享对象中不变的部分，分离对象中可变的部分**。享元对象能做到共享的关键是区分内蕴状态(Internal State)
和外蕴状态(External State)。

内蕴状态是存储在享元对象内部的，并且是不会随环境的改变而有所不同。因此，一个享元可以具有内蕴状态并可以共享。

外蕴状态是随环境的改变而改变的、不可以共享的。享元对象的外蕴状态必须由客户端保存，并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。
外蕴状态不可以影响享元对象的内蕴状态，它们是相互独立的。

享元模式以共享的方式高效地支持大量细粒度对象的重用，在享元模式中，存储这些共享实例对象的地方称为享元池(Flyweight Pool)。

注意：
通过复合享元模式，可以确保复合享元类CompositeConcreteFlyweight中所包含的每个单纯享元类ConcreteFlyweight都具有相同的外部状态，
而这些单纯享元的内部状态往往可以不同。如果希望为多个内部状态不同的享元对象设置相同的外部状态，可以考虑使用复合享元模式。




JDK类库中的String类使用了享元模式。
